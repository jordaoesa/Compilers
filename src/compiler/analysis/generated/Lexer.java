/* The following code was generated by JFlex 1.6.1 */

/**
 * Especificacao Lexica
 * @author jordaoesa
 */
package compiler.analysis.generated;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\23\1\25\1\24\1\24\22\0\1\20\1\102\1\71"+
    "\1\115\1\0\1\76\1\77\1\67\1\110\1\111\1\22\1\75\1\106"+
    "\1\10\1\70\1\21\1\1\7\3\1\26\1\2\1\107\1\103\1\74"+
    "\1\73\1\72\1\30\1\0\1\57\1\60\1\61\1\5\1\7\1\13"+
    "\1\62\1\4\1\63\2\4\1\15\1\4\1\64\1\4\1\11\2\4"+
    "\1\65\1\66\1\17\2\4\1\6\2\4\1\112\1\27\1\113\1\100"+
    "\1\56\1\0\1\41\1\32\1\36\1\37\1\40\1\12\1\51\1\47"+
    "\1\34\1\4\1\45\1\14\1\50\1\35\1\43\1\55\1\4\1\44"+
    "\1\46\1\42\1\16\1\31\1\53\1\33\1\54\1\52\1\104\1\101"+
    "\1\105\1\114\6\0\1\25\u1fa2\0\1\25\1\25\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\4\3\1\5\1\6"+
    "\1\7\1\10\15\3\1\1\1\11\1\1\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\2\3\0\3\2\1\36\1\37\1\40"+
    "\1\41\3\3\2\0\2\3\1\42\1\0\1\43\1\44"+
    "\2\3\1\45\5\3\1\46\25\3\4\0\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\2\1\0\1\36"+
    "\1\0\4\2\1\36\1\3\1\66\3\3\2\0\5\3"+
    "\1\67\37\3\1\70\1\0\1\71\3\0\1\72\1\73"+
    "\1\0\1\3\1\74\2\3\1\0\1\42\1\3\1\75"+
    "\3\3\1\76\2\3\1\77\2\3\1\100\1\3\1\101"+
    "\1\102\12\3\1\103\13\3\1\104\1\105\2\3\1\106"+
    "\3\3\1\107\13\3\1\110\1\3\1\111\3\3\1\112"+
    "\10\3\1\113\3\3\1\114\1\115\1\3\1\116\2\3"+
    "\1\117\1\120\1\121\1\122\1\123\13\3\1\124\1\3"+
    "\1\125\1\126\5\3\1\127\6\3\1\130\1\131\1\132"+
    "\1\133\1\134\1\135\1\136\1\137\1\140\1\141\5\3"+
    "\1\142\2\3\1\143\7\3\1\144\1\145";

  private static int [] zzUnpackAction() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\116\0\u03f6\0\u0444"+
    "\0\u0492\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4"+
    "\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6\0\u0924"+
    "\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46\0\116"+
    "\0\116\0\116\0\116\0\u0b94\0\116\0\116\0\116\0\116"+
    "\0\116\0\116\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68"+
    "\0\u0db6\0\u0e04\0\116\0\116\0\116\0\u0e52\0\u0ea0\0\u0eee"+
    "\0\u07ec\0\u0888\0\u0f3c\0\u0f8a\0\u0fd8\0\u1026\0\116\0\116"+
    "\0\u1074\0\u10c2\0\u0138\0\u1110\0\u115e\0\u11ac\0\u11fa\0\u1248"+
    "\0\u1296\0\u12e4\0\u1332\0\u1380\0\u13ce\0\u141c\0\u146a\0\u14b8"+
    "\0\u1506\0\u1554\0\u15a2\0\u15f0\0\u163e\0\u168c\0\u16da\0\u1728"+
    "\0\u1776\0\u17c4\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998"+
    "\0\u19e6\0\u1a34\0\u1a82\0\u1ad0\0\116\0\116\0\116\0\u1b1e"+
    "\0\116\0\116\0\116\0\116\0\116\0\116\0\116\0\116"+
    "\0\116\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\116\0\u1cf2"+
    "\0\u1d40\0\116\0\u1d8e\0\u0138\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6"+
    "\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u0138\0\u20e8"+
    "\0\u2136\0\u2184\0\u21d2\0\u2220\0\u226e\0\u22bc\0\u230a\0\u2358"+
    "\0\u23a6\0\u23f4\0\u2442\0\u2490\0\u24de\0\u252c\0\u257a\0\u25c8"+
    "\0\u2616\0\u2664\0\u26b2\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838"+
    "\0\u2886\0\u28d4\0\u2922\0\u2970\0\u29be\0\u2a0c\0\116\0\u2a5a"+
    "\0\116\0\u2aa8\0\u2af6\0\u2b44\0\116\0\116\0\u2b92\0\u2be0"+
    "\0\u0138\0\u2c2e\0\u2c7c\0\u2cca\0\116\0\u2d18\0\u0138\0\u2d66"+
    "\0\u2db4\0\u2e02\0\u0138\0\u2e50\0\u2e9e\0\u0138\0\u2eec\0\u2f3a"+
    "\0\u0138\0\u2f88\0\u0138\0\u0138\0\u2fd6\0\u3024\0\u3072\0\u30c0"+
    "\0\u310e\0\u315c\0\u31aa\0\u31f8\0\u3246\0\u3294\0\u0138\0\u32e2"+
    "\0\u3330\0\u337e\0\u33cc\0\u341a\0\u3468\0\u34b6\0\u3504\0\u3552"+
    "\0\u35a0\0\u35ee\0\u0138\0\u0138\0\u363c\0\u368a\0\u0138\0\u36d8"+
    "\0\u3726\0\u3774\0\u0138\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa"+
    "\0\u3948\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u0138\0\u3b1c"+
    "\0\u0138\0\u3b6a\0\u3bb8\0\u3c06\0\u0138\0\u3c54\0\u3ca2\0\u3cf0"+
    "\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28\0\u3e76\0\u0138\0\u3ec4\0\u3f12"+
    "\0\u3f60\0\u0138\0\u0138\0\u3fae\0\u0138\0\u3ffc\0\u404a\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u0138\0\u4098\0\u40e6\0\u4134\0\u4182"+
    "\0\u41d0\0\u421e\0\u426c\0\u42ba\0\u4308\0\u4356\0\u43a4\0\u0138"+
    "\0\u43f2\0\u0138\0\u0138\0\u4440\0\u448e\0\u44dc\0\u452a\0\u4578"+
    "\0\u0138\0\u45c6\0\u4614\0\u4662\0\u46b0\0\u46fe\0\u474c\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u479a\0\u47e8\0\u4836\0\u4884\0\u48d2\0\u0138\0\u4920"+
    "\0\u496e\0\u0138\0\u49bc\0\u4a0a\0\u4a58\0\u4aa6\0\u4af4\0\u4b42"+
    "\0\u4b90\0\u0138\0\u0138";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\4\5\1\6\1\5\1\7\1\5"+
    "\1\10\1\11\1\12\1\11\1\13\1\14\1\15\2\13"+
    "\1\2\1\4\1\2\1\16\1\17\1\20\1\5\1\21"+
    "\1\5\1\22\1\23\1\24\1\25\1\26\1\5\1\27"+
    "\1\5\1\30\2\5\1\31\1\5\1\32\2\5\1\33"+
    "\10\5\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\117\0\1\63\1\64\1\63\2\0\1\65\1\66\4\0"+
    "\1\67\1\70\2\71\6\0\1\64\4\0\1\65\4\0"+
    "\1\66\27\0\1\72\26\0\3\4\3\0\1\66\4\0"+
    "\1\67\1\70\2\71\6\0\1\4\11\0\1\66\27\0"+
    "\1\72\26\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\36\5\37\0\1\73\61\0\1\74\1\75\23\0\7\5"+
    "\1\0\3\5\1\76\3\5\6\0\1\5\2\0\12\5"+
    "\1\77\23\5\30\0\7\5\1\0\7\5\6\0\1\5"+
    "\2\0\12\5\1\100\23\5\30\0\7\5\1\0\7\5"+
    "\6\0\1\5\2\0\36\5\1\101\1\0\1\102\25\0"+
    "\7\5\1\0\7\5\6\0\1\103\2\0\4\5\1\104"+
    "\31\5\1\101\1\0\1\102\44\0\1\13\2\0\2\13"+
    "\112\0\1\105\1\106\50\0\1\107\115\0\1\110\23\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\12\5\1\111"+
    "\23\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\13\5\1\112\22\5\30\0\7\5\1\0\1\5\1\113"+
    "\5\5\6\0\1\5\2\0\4\5\1\114\31\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\10\5\1\115"+
    "\1\5\1\116\3\5\1\117\17\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\7\5\1\120\2\5\1\121"+
    "\23\5\30\0\7\5\1\0\3\5\1\122\3\5\6\0"+
    "\1\5\2\0\2\5\1\123\1\5\1\124\31\5\30\0"+
    "\7\5\1\0\5\5\1\125\1\5\6\0\1\5\2\0"+
    "\36\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\23\5\1\126\12\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\7\5\1\127\26\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\3\5\1\130\5\5\1\131"+
    "\4\5\1\132\3\5\1\133\13\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\12\5\1\134\23\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\16\5\1\135"+
    "\17\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\25\5\1\136\1\137\1\140\1\141\1\142\1\143\1\144"+
    "\1\145\1\146\27\0\23\147\1\0\3\147\1\150\37\147"+
    "\1\0\26\147\1\0\3\72\22\0\1\72\41\0\1\151"+
    "\25\0\23\102\1\0\3\102\1\152\41\102\1\153\24\102"+
    "\72\0\1\154\1\155\115\0\1\156\115\0\1\157\1\160"+
    "\1\0\1\51\10\0\1\57\101\0\1\161\1\0\1\162"+
    "\112\0\1\52\1\163\115\0\1\164\3\0\1\165\111\0"+
    "\1\166\115\0\1\167\5\0\1\170\107\0\1\171\114\0"+
    "\1\60\24\0\1\63\1\64\1\63\3\0\1\66\4\0"+
    "\1\67\1\70\2\71\6\0\1\64\11\0\1\66\27\0"+
    "\1\72\26\0\3\64\3\0\1\66\16\0\1\64\11\0"+
    "\1\66\27\0\1\72\26\0\3\172\1\0\1\172\1\0"+
    "\1\172\2\0\2\172\12\0\1\172\3\0\1\172\3\0"+
    "\4\172\15\0\3\172\6\0\1\173\26\0\3\174\4\0"+
    "\1\175\15\0\1\174\46\0\1\175\34\0\1\176\1\0"+
    "\2\177\113\0\1\176\2\177\112\0\1\200\1\201\101\0"+
    "\3\72\3\0\1\66\2\0\4\202\10\0\1\72\11\0"+
    "\1\66\56\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\12\5\1\203\23\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\13\5\1\204\22\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\4\5\1\205\31\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\36\5\2\0"+
    "\1\102\25\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\3\5\1\206\11\5\1\207\20\5\27\0\23\105\3\0"+
    "\70\105\22\210\1\211\73\210\1\0\7\5\1\0\3\5"+
    "\1\212\3\5\6\0\1\5\2\0\3\5\1\213\32\5"+
    "\30\0\7\5\1\0\7\5\6\0\1\5\2\0\7\5"+
    "\1\214\26\5\30\0\7\5\1\0\3\5\1\215\3\5"+
    "\6\0\1\5\2\0\5\5\1\216\3\5\1\217\24\5"+
    "\30\0\7\5\1\0\7\5\6\0\1\5\2\0\15\5"+
    "\1\220\20\5\30\0\7\5\1\0\7\5\6\0\1\5"+
    "\2\0\4\5\1\221\31\5\30\0\7\5\1\0\7\5"+
    "\6\0\1\5\2\0\10\5\1\222\25\5\30\0\7\5"+
    "\1\0\1\5\1\223\5\5\6\0\1\5\2\0\36\5"+
    "\30\0\7\5\1\0\5\5\1\224\1\5\6\0\1\5"+
    "\2\0\36\5\30\0\7\5\1\0\7\5\6\0\1\5"+
    "\2\0\15\5\1\225\20\5\30\0\7\5\1\0\7\5"+
    "\6\0\1\5\2\0\11\5\1\226\24\5\30\0\7\5"+
    "\1\0\5\5\1\227\1\5\6\0\1\5\2\0\36\5"+
    "\30\0\7\5\1\0\7\5\6\0\1\5\2\0\11\5"+
    "\1\230\24\5\30\0\7\5\1\0\7\5\6\0\1\5"+
    "\2\0\24\5\1\231\11\5\30\0\7\5\1\0\7\5"+
    "\6\0\1\5\2\0\11\5\1\232\3\5\1\233\2\5"+
    "\1\234\15\5\30\0\7\5\1\0\7\5\6\0\1\5"+
    "\2\0\20\5\1\235\1\236\14\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\10\5\1\237\2\5\1\240"+
    "\22\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\12\5\1\241\23\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\3\5\1\242\32\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\11\5\1\243\24\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\3\5\1\244"+
    "\32\5\30\0\7\5\1\0\1\5\1\245\5\5\6\0"+
    "\1\5\2\0\36\5\30\0\7\5\1\0\3\5\1\246"+
    "\3\5\6\0\1\5\2\0\11\5\1\247\24\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\12\5\1\250"+
    "\23\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\12\5\1\251\23\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\7\5\1\252\26\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\17\5\1\253\16\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\12\5\1\254"+
    "\23\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\11\5\1\255\24\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\16\5\1\256\17\5\27\0\23\147\1\0"+
    "\3\147\1\150\37\147\1\257\26\147\1\0\1\147\1\0"+
    "\1\147\6\0\1\147\14\0\4\147\1\260\1\0\1\147"+
    "\3\0\2\147\1\0\1\147\22\0\1\147\1\0\1\147"+
    "\114\0\1\261\26\0\1\102\1\0\1\102\6\0\1\102"+
    "\14\0\4\102\1\262\1\0\1\102\3\0\2\102\1\0"+
    "\1\102\22\0\1\102\1\0\1\102\41\0\1\263\1\264"+
    "\1\263\1\153\2\0\2\153\44\0\1\102\117\0\1\265"+
    "\115\0\1\266\23\0\3\172\1\0\1\172\1\0\1\172"+
    "\1\0\1\66\2\172\1\67\1\70\2\71\6\0\1\172"+
    "\3\0\1\172\3\0\4\172\13\0\1\66\1\0\3\172"+
    "\6\0\1\267\26\0\3\267\1\0\1\267\1\0\1\267"+
    "\2\0\2\267\12\0\1\267\3\0\1\267\3\0\4\267"+
    "\15\0\3\267\35\0\3\174\6\0\4\202\10\0\1\174"+
    "\70\0\3\174\22\0\1\174\105\0\2\177\112\0\1\177"+
    "\116\0\1\177\101\0\7\5\1\0\7\5\6\0\1\5"+
    "\2\0\10\5\1\270\25\5\30\0\7\5\1\0\7\5"+
    "\6\0\1\5\2\0\20\5\1\271\15\5\30\0\7\5"+
    "\1\0\7\5\6\0\1\5\2\0\12\5\1\272\23\5"+
    "\30\0\7\5\1\0\7\5\6\0\1\5\2\0\3\5"+
    "\1\273\32\5\27\0\22\210\1\274\73\210\21\0\1\275"+
    "\1\211\74\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\10\5\1\276\25\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\6\5\1\277\27\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\10\5\1\300\25\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\3\5\1\301"+
    "\32\5\30\0\7\5\1\0\3\5\1\302\3\5\6\0"+
    "\1\5\2\0\36\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\7\5\1\303\26\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\11\5\1\304\3\5\1\305"+
    "\20\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\13\5\1\306\22\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\10\5\1\307\25\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\1\5\1\310\34\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\7\5\1\311"+
    "\26\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\7\5\1\312\26\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\17\5\1\313\16\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\12\5\1\314\23\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\7\5\1\315"+
    "\26\5\30\0\7\5\1\0\5\5\1\316\1\5\6\0"+
    "\1\5\2\0\36\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\11\5\1\317\24\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\3\5\1\320\32\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\4\5\1\321"+
    "\31\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\7\5\1\322\26\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\11\5\1\323\24\5\30\0\7\5\1\0"+
    "\5\5\1\324\1\5\6\0\1\5\2\0\36\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\13\5\1\325"+
    "\22\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\11\5\1\326\24\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\12\5\1\327\23\5\30\0\7\5\1\0"+
    "\3\5\1\330\3\5\6\0\1\5\2\0\36\5\30\0"+
    "\7\5\1\0\5\5\1\331\1\5\6\0\1\5\2\0"+
    "\36\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\3\5\1\332\32\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\12\5\1\333\23\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\12\5\1\334\23\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\17\5\1\335"+
    "\16\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\4\5\1\336\31\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\10\5\1\337\25\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\13\5\1\340\22\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\10\5\1\341"+
    "\25\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\13\5\1\342\22\5\30\0\3\147\1\0\1\147\1\0"+
    "\1\147\2\0\2\147\12\0\1\147\3\0\1\147\3\0"+
    "\4\147\15\0\3\147\35\0\3\102\1\0\1\102\1\0"+
    "\1\102\2\0\2\102\12\0\1\102\3\0\1\102\3\0"+
    "\4\102\15\0\3\102\125\0\1\102\52\0\1\263\42\0"+
    "\1\102\25\0\3\267\1\0\1\267\1\0\1\267\1\0"+
    "\1\66\2\267\12\0\1\267\3\0\1\267\3\0\4\267"+
    "\13\0\1\66\1\0\3\267\35\0\7\5\1\0\7\5"+
    "\6\0\1\5\2\0\11\5\1\343\24\5\30\0\7\5"+
    "\1\0\7\5\6\0\1\5\2\0\4\5\1\344\31\5"+
    "\30\0\7\5\1\0\7\5\6\0\1\5\2\0\20\5"+
    "\1\345\15\5\27\0\21\210\1\275\1\274\73\210\1\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\11\5\1\346"+
    "\24\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\14\5\1\347\21\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\4\5\1\350\31\5\30\0\7\5\1\0"+
    "\5\5\1\351\1\5\6\0\1\5\2\0\36\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\3\5\1\352"+
    "\32\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\11\5\1\353\24\5\30\0\7\5\1\0\5\5\1\354"+
    "\1\5\6\0\1\5\2\0\36\5\30\0\7\5\1\0"+
    "\3\5\1\355\3\5\6\0\1\5\2\0\36\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\13\5\1\356"+
    "\22\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\6\5\1\357\27\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\13\5\1\360\22\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\13\5\1\361\22\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\15\5\1\362"+
    "\20\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\7\5\1\363\26\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\12\5\1\364\23\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\3\5\1\365\32\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\5\5\1\366"+
    "\30\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\11\5\1\367\24\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\5\5\1\370\30\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\7\5\1\371\26\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\4\5\1\372"+
    "\31\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\20\5\1\373\15\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\17\5\1\374\16\5\30\0\7\5\1\0"+
    "\3\5\1\375\3\5\6\0\1\5\2\0\36\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\24\5\1\376"+
    "\11\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\7\5\1\377\26\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\20\5\1\u0100\15\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\7\5\1\u0101\26\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\11\5\1\u0102"+
    "\24\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\7\5\1\u0103\26\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\4\5\1\u0104\31\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\3\5\1\u0105\32\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\7\5\1\u0106"+
    "\26\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\6\5\1\u0107\27\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\4\5\1\u0108\31\5\30\0\7\5\1\0"+
    "\3\5\1\u0109\3\5\6\0\1\5\2\0\36\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\7\5\1\u010a"+
    "\26\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\4\5\1\u010b\31\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\7\5\1\u010c\26\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\4\5\1\u010d\31\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\3\5\1\u010e"+
    "\32\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\11\5\1\u010f\24\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\6\5\1\u0110\27\5\30\0\7\5\1\0"+
    "\1\5\1\u0111\5\5\6\0\1\5\2\0\36\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\5\5\1\u0112"+
    "\30\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\11\5\1\u0113\24\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\16\5\1\u0114\17\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\5\5\1\u0115\30\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\4\5\1\u0116"+
    "\31\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\3\5\1\u0117\32\5\30\0\7\5\1\0\3\5\1\u0118"+
    "\3\5\6\0\1\5\2\0\36\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\13\5\1\u0119\22\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\3\5\1\u011a"+
    "\32\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\11\5\1\u011b\24\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\3\5\1\u011c\32\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\10\5\1\u011d\25\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\7\5\1\u011e"+
    "\26\5\30\0\7\5\1\0\3\5\1\u011f\3\5\6\0"+
    "\1\5\2\0\36\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\7\5\1\u0120\26\5\30\0\7\5\1\0"+
    "\5\5\1\u0121\1\5\6\0\1\5\2\0\36\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\11\5\1\u0122"+
    "\24\5\30\0\7\5\1\0\1\5\1\u0123\5\5\6\0"+
    "\1\5\2\0\36\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\5\5\1\u0124\30\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\7\5\1\u0125\26\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\25\5\1\u0126"+
    "\10\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\10\5\1\u0127\1\5\1\u0128\23\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\5\5\1\u0129\30\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\7\5\1\u012a"+
    "\26\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\3\5\1\u012b\32\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\4\5\1\u012c\31\5\30\0\7\5\1\0"+
    "\5\5\1\u012d\1\5\6\0\1\5\2\0\36\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\5\5\1\u012e"+
    "\30\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\6\5\1\u012f\27\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\6\5\1\u0130\27\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\7\5\1\u0131\26\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\7\5\1\u0132"+
    "\26\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\11\5\1\u0133\24\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\13\5\1\u0134\22\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\25\5\1\u0135\10\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\15\5\1\u0136"+
    "\20\5\30\0\7\5\1\0\1\5\1\u0137\5\5\6\0"+
    "\1\5\2\0\36\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\2\5\1\u0138\33\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\5\5\1\u0139\30\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\10\5\1\u013a"+
    "\25\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\13\5\1\u013b\22\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\25\5\1\u013c\10\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\25\5\1\u013d\10\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\13\5\1\u013e"+
    "\22\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\4\5\1\u013f\31\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\10\5\1\u0140\25\5\30\0\7\5\1\0"+
    "\3\5\1\u0141\3\5\6\0\1\5\2\0\36\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\23\5\1\u0142"+
    "\12\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\15\5\1\u0143\20\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\12\5\1\u0144\23\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\15\5\1\u0145\20\5\30\0"+
    "\7\5\1\0\7\5\6\0\1\5\2\0\5\5\1\u0146"+
    "\30\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\7\5\1\u0147\26\5\30\0\7\5\1\0\7\5\6\0"+
    "\1\5\2\0\10\5\1\u0148\25\5\30\0\7\5\1\0"+
    "\7\5\6\0\1\5\2\0\13\5\1\u0149\22\5\30\0"+
    "\7\5\1\0\3\5\1\u014a\3\5\6\0\1\5\2\0"+
    "\36\5\30\0\7\5\1\0\7\5\6\0\1\5\2\0"+
    "\11\5\1\u014b\24\5\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19422];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\1\11\31\1\4\11\1\1\6\11"+
    "\1\1\3\0\4\1\3\11\3\1\2\0\3\1\1\0"+
    "\2\11\36\1\4\0\2\1\3\11\1\1\11\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\2\1\1\11\5\1"+
    "\2\0\45\1\1\11\1\0\1\11\3\0\2\11\1\0"+
    "\4\1\1\0\1\11\216\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  public static int yyPreviousPublicLine;
  public static int yyPublicLine;
  StringBuffer string = new StringBuffer();
  
  public static int getCurrentLine(){
	if(Lexer.yyPreviousPublicLine != Lexer.yyPublicLine) return Lexer.yyPreviousPublicLine;
	return Lexer.yyPublicLine;
  }

  private Symbol symbol(int type) {
    yyPreviousPublicLine = yyPublicLine;
  	yyPublicLine = yyline+1;
    return new Symbol(type, yyline+1, yycolumn+1);
  }
  private Symbol symbol(int type, Object value) {
  	yyPreviousPublicLine = yyPublicLine;
  	yyPublicLine = yyline+1;
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }
  private void reportError(int line, String message) {
    throw new RuntimeException("Erro lexico na linha " + line + ": " + message);
  }
  private int yywrap(){
    return 1;
  }
  private Symbol addIdentifierType(String identifier){
    if(identifier.contains("\'")) return new Symbol(sym.IDENTIFIER, sym.CHAR);
    return new Symbol(sym.IDENTIFIER, identifier); 
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { reportError(yyline+1, "Caractere invalido \"" + yytext() + "\"");
            }
          case 102: break;
          case 2: 
            { return symbol(sym.I_CONSTANT, yytext());
            }
          case 103: break;
          case 3: 
            { return symbol(sym.IDENTIFIER, yytext());
            }
          case 104: break;
          case 4: 
            { return symbol(sym.MINUS, yytext());
            }
          case 105: break;
          case 5: 
            { /* whitespace separates tokens */
            }
          case 106: break;
          case 6: 
            { return symbol(sym.DIV, yytext());
            }
          case 107: break;
          case 7: 
            { return symbol(sym.TIMES, yytext());
            }
          case 108: break;
          case 8: 
            { return symbol(sym.QUESTION, yytext());
            }
          case 109: break;
          case 9: 
            { return symbol(sym.DOT, yytext());
            }
          case 110: break;
          case 10: 
            { return symbol(sym.GREATER_THAN, yytext());
            }
          case 111: break;
          case 11: 
            { return symbol(sym.ASSIGNMENT, yytext());
            }
          case 112: break;
          case 12: 
            { return symbol(sym.LESS_THAN, yytext());
            }
          case 113: break;
          case 13: 
            { return symbol(sym.PLUS, yytext());
            }
          case 114: break;
          case 14: 
            { return symbol(sym.MOD, yytext());
            }
          case 115: break;
          case 15: 
            { return symbol(sym.AND_BINARY, yytext());
            }
          case 116: break;
          case 16: 
            { return symbol(sym.XOR_BINARY, yytext());
            }
          case 117: break;
          case 17: 
            { return symbol(sym.OR_BINARY, yytext());
            }
          case 118: break;
          case 18: 
            { return symbol(sym.NEG, yytext());
            }
          case 119: break;
          case 19: 
            { return symbol(sym.SEMICOLON, yytext());
            }
          case 120: break;
          case 20: 
            { return symbol(sym.LEFT_BRACKET, yytext());
            }
          case 121: break;
          case 21: 
            { return symbol(sym.RIGHT_BRACKET, yytext());
            }
          case 122: break;
          case 22: 
            { return symbol(sym.COMMA, yytext());
            }
          case 123: break;
          case 23: 
            { return symbol(sym.COLON, yytext());
            }
          case 124: break;
          case 24: 
            { return symbol(sym.LEFT_PARENTESIS, yytext());
            }
          case 125: break;
          case 25: 
            { return symbol(sym.RIGHT_PARENTESIS, yytext());
            }
          case 126: break;
          case 26: 
            { return symbol(sym.LEFT_SQ_BRACK, yytext());
            }
          case 127: break;
          case 27: 
            { return symbol(sym.RIGHT_SQ_BRACK, yytext());
            }
          case 128: break;
          case 28: 
            { return symbol(sym.NEG_BINARY, yytext());
            }
          case 129: break;
          case 29: 
            { return symbol(sym.POUND, yytext());
            }
          case 130: break;
          case 30: 
            { return symbol(sym.F_CONSTANT, yytext());
            }
          case 131: break;
          case 31: 
            { return symbol(sym.DEC_OP, yytext());
            }
          case 132: break;
          case 32: 
            { return symbol(sym.PTR_OP, yytext());
            }
          case 133: break;
          case 33: 
            { return symbol(sym.SUB_ASSIGN, yytext());
            }
          case 134: break;
          case 34: 
            { /* comentarios */
            }
          case 135: break;
          case 35: 
            { return symbol(sym.DIV_ASSIGN, yytext());
            }
          case 136: break;
          case 36: 
            { return symbol(sym.MUL_ASSIGN, yytext());
            }
          case 137: break;
          case 37: 
            { return symbol(sym.IF, yytext());
            }
          case 138: break;
          case 38: 
            { return symbol(sym.DO, yytext());
            }
          case 139: break;
          case 39: 
            { return symbol(sym.STRING_LITERAL, yytext());
            }
          case 140: break;
          case 40: 
            { return symbol(sym.RIGHT_OP, yytext());
            }
          case 141: break;
          case 41: 
            { return symbol(sym.GE_OP, yytext());
            }
          case 142: break;
          case 42: 
            { return symbol(sym.EQ_OP, yytext());
            }
          case 143: break;
          case 43: 
            { return symbol(sym.LE_OP, yytext());
            }
          case 144: break;
          case 44: 
            { return symbol(sym.LEFT_OP, yytext());
            }
          case 145: break;
          case 45: 
            { return symbol(sym.ADD_ASSIGN, yytext());
            }
          case 146: break;
          case 46: 
            { return symbol(sym.INC_OP, yytext());
            }
          case 147: break;
          case 47: 
            { return symbol(sym.MOD_ASSIGN, yytext());
            }
          case 148: break;
          case 48: 
            { return symbol(sym.AND_ASSIGN, yytext());
            }
          case 149: break;
          case 49: 
            { return symbol(sym.AND_OP, yytext());
            }
          case 150: break;
          case 50: 
            { return symbol(sym.XOR_ASSIGN, yytext());
            }
          case 151: break;
          case 51: 
            { return symbol(sym.OR_ASSIGN, yytext());
            }
          case 152: break;
          case 52: 
            { return symbol(sym.OR_OP, yytext());
            }
          case 153: break;
          case 53: 
            { return symbol(sym.NE_OP, yytext());
            }
          case 154: break;
          case 54: 
            { return symbol(sym.FOR, yytext());
            }
          case 155: break;
          case 55: 
            { return symbol(sym.INT, yytext());
            }
          case 156: break;
          case 56: 
            { return symbol(sym.C_CONSTANT, yytext());
            }
          case 157: break;
          case 57: 
            { return symbol(sym.ELLIPSIS, yytext());
            }
          case 158: break;
          case 58: 
            { return symbol(sym.RIGHT_ASSIGN, yytext());
            }
          case 159: break;
          case 59: 
            { return symbol(sym.LEFT_ASSIGN, yytext());
            }
          case 160: break;
          case 60: 
            { return symbol(sym.LONG, yytext());
            }
          case 161: break;
          case 61: 
            { return symbol(sym.VOID, yytext());
            }
          case 162: break;
          case 62: 
            { return symbol(sym.CASE, yytext());
            }
          case 163: break;
          case 63: 
            { return symbol(sym.CHAR, yytext());
            }
          case 164: break;
          case 64: 
            { return symbol(sym.ELSE, yytext());
            }
          case 165: break;
          case 65: 
            { return symbol(sym.ENUM, yytext());
            }
          case 166: break;
          case 66: 
            { return symbol(sym.AUTO, yytext());
            }
          case 167: break;
          case 67: 
            { return symbol(sym.GOTO, yytext());
            }
          case 168: break;
          case 68: 
            { return symbol(sym.FLOAT, yytext());
            }
          case 169: break;
          case 69: 
            { return symbol(sym.UNION, yytext());
            }
          case 170: break;
          case 70: 
            { return symbol(sym.BREAK, yytext());
            }
          case 171: break;
          case 71: 
            { return symbol(sym.CONST, yytext());
            }
          case 172: break;
          case 72: 
            { return symbol(sym.SHORT, yytext());
            }
          case 173: break;
          case 73: 
            { return symbol(sym.WHILE, yytext());
            }
          case 174: break;
          case 74: 
            { return symbol(sym.BOOL, "bool");
            }
          case 175: break;
          case 75: 
            { return symbol(sym.INLINE, yytext());
            }
          case 176: break;
          case 76: 
            { return symbol(sym.DOUBLE, yytext());
            }
          case 177: break;
          case 77: 
            { return symbol(sym.EXTERN, yytext());
            }
          case 178: break;
          case 78: 
            { return symbol(sym.RETURN, yytext());
            }
          case 179: break;
          case 79: 
            { return symbol(sym.SIGNED, yytext());
            }
          case 180: break;
          case 80: 
            { return symbol(sym.SIZEOF, yytext());
            }
          case 181: break;
          case 81: 
            { return symbol(sym.STATIC, yytext());
            }
          case 182: break;
          case 82: 
            { return symbol(sym.STRUCT, yytext());
            }
          case 183: break;
          case 83: 
            { return symbol(sym.SWITCH, yytext());
            }
          case 184: break;
          case 84: 
            { return symbol(sym.INCLUDE, yytext());
            }
          case 185: break;
          case 85: 
            { return symbol(sym.DEFAULT, yytext());
            }
          case 186: break;
          case 86: 
            { return symbol(sym.TYPEDEF, yytext());
            }
          case 187: break;
          case 87: 
            { return symbol(sym.ATOMIC, yytext());
            }
          case 188: break;
          case 88: 
            { return symbol(sym.UNSIGNED, yytext());
            }
          case 189: break;
          case 89: 
            { return symbol(sym.VOLATILE, yytext());
            }
          case 190: break;
          case 90: 
            { return symbol(sym.CONTINUE, yytext());
            }
          case 191: break;
          case 91: 
            { return symbol(sym.RESTRICT, yytext());
            }
          case 192: break;
          case 92: 
            { return symbol(sym.REGISTER, yytext());
            }
          case 193: break;
          case 93: 
            { return symbol(sym.FUNC_NAME, yytext());
            }
          case 194: break;
          case 94: 
            { return symbol(sym.ALIGNAS, yytext());
            }
          case 195: break;
          case 95: 
            { return symbol(sym.ALIGNOF, yytext());
            }
          case 196: break;
          case 96: 
            { return symbol(sym.COMPLEX, yytext());
            }
          case 197: break;
          case 97: 
            { return symbol(sym.GENERIC, yytext());
            }
          case 198: break;
          case 98: 
            { return symbol(sym.NORETURN, yytext());
            }
          case 199: break;
          case 99: 
            { return symbol(sym.IMAGINARY, yytext());
            }
          case 200: break;
          case 100: 
            { return symbol(sym.THREAD_LOCAL, yytext());
            }
          case 201: break;
          case 101: 
            { return symbol(sym.STATIC_ASSERT, yytext());
            }
          case 202: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
