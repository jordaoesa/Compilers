/**
 * Especificacao Sintatica
 * @author jordaoesa
 */
package compiler.analysis.generated;

import java.util.ArrayList;

import java_cup.runtime.*;
import compiler.analysis.SemanticAnalyser;
import compiler.analysis.model.Type;
import compiler.analysis.model.Console;


parser code {:
  
  public static SemanticAnalyser sAnalyser = new SemanticAnalyser();
  
  public void report_error(String message, Object info) {
   
    StringBuffer m = new StringBuffer("Erro");
   
    if (info instanceof java_cup.runtime.Symbol) {
  	  java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
      m.append(" na linha " + (s.left));
      m.append(", coluna " + (s.right));
    }
    m.append(" : " + message);
    System.err.println(m);
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(-1);
  }
    
:};

terminal	IDENTIFIER, I_CONSTANT, F_CONSTANT, C_CONSTANT, STRING_LITERAL, FUNC_NAME, SIZEOF;
terminal	PTR_OP, INC_OP, DEC_OP, LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP;
terminal	AND_OP, OR_OP, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN;
terminal	SUB_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, AND_ASSIGN;
terminal	XOR_ASSIGN, OR_ASSIGN;
terminal	TYPEDEF_NAME, ENUMERATION_CONSTANT;

terminal	TYPEDEF, EXTERN, STATIC, AUTO, REGISTER, INLINE;
terminal	CONST, RESTRICT, VOLATILE;
terminal	BOOL, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID;
terminal	COMPLEX, IMAGINARY;
terminal	STRUCT, UNION, ENUM, ELLIPSIS;

terminal	CASE, DEFAULT, IF, ELSE, SWITCH, WHILE, DO, FOR, GOTO, CONTINUE, BREAK, RETURN;

terminal	ALIGNAS, ALIGNOF, ATOMIC, GENERIC, NORETURN, STATIC_ASSERT, THREAD_LOCAL;

/* novos coisinhas */
terminal	DOT, SEMICOLON, COMMA, COLON, ASSIGNMENT, QUESTION, NEG, POUND, INCLUDE;
terminal	LEFT_PARENTESIS, RIGHT_PARENTESIS, LEFT_SQ_BRACK, RIGHT_SQ_BRACK, LEFT_BRACKET, RIGHT_BRACKET;
terminal	AND_BINARY, NEG_BINARY, MINUS, PLUS, TIMES, DIV, MOD, LESS_THAN, GREATER_THAN, XOR_BINARY, OR_BINARY;

/* nao terminais tbm sao novos */
non terminal primary_expression, constant, enumeration_constant, string, generic_selection;
non terminal generic_assoc_list, generic_association, postfix_expression, argument_expression_list;
non terminal unary_expression, unary_operator, cast_expression, multiplicative_expression;
non terminal additive_expression, shift_expression, relational_expression, equality_expression;
non terminal and_expression, exclusive_or_expression, inclusive_or_expression, logical_and_expression;
non terminal logical_or_expression, conditional_expression, assignment_expression, assignment_operator;
non terminal expression, constant_expression, declaration, declaration_specifiers, init_declarator_list;
non terminal init_declarator, storage_class_specifier, type_specifier, struct_or_union_specifier;
non terminal struct_or_union, struct_declaration_list, struct_declaration, specifier_qualifier_list;
non terminal struct_declarator_list, struct_declarator, enum_specifier, enumerator_list, enumerator;
non terminal atomic_type_specifier, type_qualifier, function_specifier, alignment_specifier;
non terminal declarator, direct_declarator, pointer, type_qualifier_list, parameter_type_list;
non terminal parameter_list, parameter_declaration, identifier_list, type_name, abstract_declarator;
non terminal direct_abstract_declarator, initializer, initializer_list, designation, designator_list;
non terminal designator, static_assert_declaration, statement, labeled_statement, compound_statement;
non terminal block_item_list, block_item, expression_statement, selection_statement, iteration_statement;
non terminal jump_statement, translation_unit, external_declaration, function_definition, declaration_list;
non terminal include, includes;


start with translation_unit;

includes
	::= include
	| include includes
	;

include
	::= POUND INCLUDE LESS_THAN IDENTIFIER GREATER_THAN
	| POUND INCLUDE LESS_THAN IDENTIFIER DOT IDENTIFIER GREATER_THAN
	;

primary_expression
	::= IDENTIFIER:id {: RESULT = parser.sAnalyser.getTypeIfExists((String)id); if(RESULT == null) RESULT = id; Console.log("<IDENTIFIER:id> " + id); :}
	| constant:ct {: RESULT = ct; Console.logNT("<constant:ct> " + ct); :}
	| string:str {: RESULT = str; Console.logNT("<string:str> " + str); :}
	| LEFT_PARENTESIS expression RIGHT_PARENTESIS
	| generic_selection
	;

constant
	::= I_CONSTANT:ict {: RESULT = new Type("int"); Console.log("<I_CONSTANT:ict> " + ict); :}		/* includes character_constant */
	| F_CONSTANT:fct {: RESULT = new Type("float"); Console.log("<F_CONSTANT:fct> " + fct); :}
	| C_CONSTANT:cct {: RESULT = new Type("char"); Console.log("<C_CONSTANT:cct> " + cct); :}
	| ENUMERATION_CONSTANT	/* after it has been defined as such */
	;

enumeration_constant		/* before it has been defined as such */
	::= IDENTIFIER
	;

string
	::= STRING_LITERAL:sl {: RESULT = sl; Console.log("<STRING_LITERAL:sl> " + sl); :}
	| FUNC_NAME:fc {: RESULT = fc; Console.log("<FUNC_NAME:fc> " + fc); :}
	;

generic_selection
	::= GENERIC LEFT_PARENTESIS assignment_expression COMMA generic_assoc_list RIGHT_PARENTESIS
	;

generic_assoc_list
	::= generic_association
	| generic_assoc_list COMMA generic_association
	;

generic_association
	::= type_name COLON assignment_expression
	| DEFAULT COLON assignment_expression
	;

postfix_expression
	::= primary_expression:pe {: RESULT = pe; Console.logNT("<primary_expression:pe> " + pe); :}
	| postfix_expression LEFT_SQ_BRACK expression RIGHT_SQ_BRACK
	| postfix_expression LEFT_PARENTESIS RIGHT_PARENTESIS
	| postfix_expression LEFT_PARENTESIS argument_expression_list RIGHT_PARENTESIS
	| postfix_expression DOT IDENTIFIER
	| postfix_expression PTR_OP IDENTIFIER
	| postfix_expression INC_OP
	| postfix_expression DEC_OP
	| LEFT_PARENTESIS type_name RIGHT_PARENTESIS LEFT_BRACKET initializer_list RIGHT_BRACKET
	| LEFT_PARENTESIS type_name RIGHT_PARENTESIS LEFT_BRACKET initializer_list COMMA RIGHT_BRACKET
	;

argument_expression_list
	::= assignment_expression
	| argument_expression_list COMMA assignment_expression
	;

unary_expression
	::= postfix_expression:pe {: RESULT = pe; Console.logNT("<postfix_expression:pe> " + pe); :}
	| INC_OP unary_expression
	| DEC_OP unary_expression
	| unary_operator cast_expression
	| SIZEOF unary_expression
	| SIZEOF LEFT_PARENTESIS type_name RIGHT_PARENTESIS
	| ALIGNOF LEFT_PARENTESIS type_name RIGHT_PARENTESIS
	;

unary_operator
	::= AND_BINARY
	| TIMES
	| PLUS
	| MINUS
	| NEG_BINARY
	| NEG
	;

cast_expression
	::= unary_expression:ue {: RESULT = ue; Console.logNT("<unary_expression:ue> " + ue); :}
	| LEFT_PARENTESIS type_name RIGHT_PARENTESIS cast_expression
	;

multiplicative_expression
	::= cast_expression:ce {: RESULT = ce; Console.logNT("<cast_expression:ce> " + ce); :}
	| multiplicative_expression TIMES cast_expression
	| multiplicative_expression DIV cast_expression
	| multiplicative_expression MOD cast_expression
	;

additive_expression
	::= multiplicative_expression:me {: RESULT = me; Console.logNT("<multiplicative_expression:me> " + me); :}
	| additive_expression PLUS multiplicative_expression
	| additive_expression MINUS multiplicative_expression
	;

shift_expression
	::= additive_expression:ae {: RESULT = ae; Console.logNT("<additive_expression:ae> " + ae); :}
	| shift_expression LEFT_OP additive_expression {: Console.logNT("shift_expression LEFT_OP additive_expression: "); :}
	| shift_expression RIGHT_OP additive_expression {: Console.logNT("shift_expression LEFT_OP additive_expression: "); :}
	;

relational_expression 
	::= shift_expression:se {: RESULT = se; Console.logNT("<shift_expression:se> " + se); :}
	| relational_expression:re LESS_THAN shift_expression:se {: RESULT = parser.sAnalyser.getRelationalExpressionType((Type)re, (Type)se); Console.logNT("<relational_expression LESS_THAN shift_expression>"); :}
	| relational_expression:re GREATER_THAN shift_expression:se {: RESULT = parser.sAnalyser.getRelationalExpressionType((Type)re, (Type)se); Console.logNT("<relational_expression LESS_THAN shift_expression>"); :}
	| relational_expression:re LE_OP shift_expression:se {: RESULT = parser.sAnalyser.getRelationalExpressionType((Type)re, (Type)se); Console.logNT("<relational_expression LE_OP shift_expression>"); :}
	| relational_expression:re GE_OP shift_expression:se {: RESULT = parser.sAnalyser.getRelationalExpressionType((Type)re, (Type)se); Console.logNT("<relational_expression GE_OP shift_expression>"); :}
	;

equality_expression
	::= relational_expression:re {: RESULT = re; Console.logNT("<relational_expression:re> " + re); :}
	| equality_expression:ee EQ_OP relational_expression:re {: RESULT = parser.sAnalyser.getRelationalExpressionType((Type)ee, (Type)re); Console.logNT("<equality_expression EQ_OP relational_expression>"); :}
	| equality_expression:ee NE_OP relational_expression:re {: RESULT = parser.sAnalyser.getRelationalExpressionType((Type)ee, (Type)re); Console.logNT("<equality_expression NE_OP relational_expression>"); :}
	;

and_expression
	::= equality_expression:ee {: RESULT = ee; Console.logNT("<equality_expression:ee> " + ee); :}
	| and_expression AND_BINARY equality_expression
	;

exclusive_or_expression
	::= and_expression:ae {: RESULT = ae; Console.logNT("<and_expression:ae> " + ae); :}
	| exclusive_or_expression XOR_BINARY and_expression
	;

inclusive_or_expression
	::= exclusive_or_expression:ee {: RESULT = ee; Console.logNT("<exclusive_or_expression:ee> " + ee); :}
	| inclusive_or_expression OR_BINARY exclusive_or_expression
	;

logical_and_expression
	::= inclusive_or_expression:ie {: RESULT = ie; Console.logNT("<inclusive_or_expression:ie> " + ie); :}
	| logical_and_expression AND_OP inclusive_or_expression
	;

logical_or_expression
	::= logical_and_expression:le {: RESULT = le; Console.logNT("<logical_and_expression:le> " + le); :}
	| logical_or_expression OR_OP logical_and_expression
	;

conditional_expression
	::= logical_or_expression:le {: RESULT = le; Console.logNT("<logical_or_expression:le> " + le); :}
	| logical_or_expression QUESTION expression COLON conditional_expression
	;

assignment_expression
	::= conditional_expression:ce {: RESULT = ce; Console.logNT("<conditional_expression:ce> " + ce); :}
	| unary_expression:ue assignment_operator:ao assignment_expression:ae {: RESULT = ao; parser.sAnalyser.checkTypesDeclaration(ue, ae); :}
	;

assignment_operator
	::= ASSIGNMENT:a {: RESULT = a; Console.log("<ASSIGNMENT:a> " + a); :}
	| MUL_ASSIGN
	| DIV_ASSIGN
	| MOD_ASSIGN
	| ADD_ASSIGN
	| SUB_ASSIGN
	| LEFT_ASSIGN
	| RIGHT_ASSIGN
	| AND_ASSIGN
	| XOR_ASSIGN
	| OR_ASSIGN
	;

expression
	::= assignment_expression:ae {: RESULT = ae; Console.logNT("<assignment_expression:ae> " + ae); :}
	| expression COMMA assignment_expression 
	;

constant_expression
	::= conditional_expression	/* with constraints */
	;

declaration
	::= declaration_specifiers:de SEMICOLON
	| declaration_specifiers:de init_declarator_list:idl SEMICOLON {: RESULT = de; Console.logNT("<declaration_specifiers:de> " + de + " <init_declarator_list:idl> " + idl); parser.sAnalyser.checkTypesDeclaration(de, idl); parser.sAnalyser.setNextVariableType((Type)de); :}
	| static_assert_declaration
	;

declaration_specifiers
	::= storage_class_specifier declaration_specifiers
	| storage_class_specifier
	| type_specifier:ts declaration_specifiers:ds {: RESULT = ts; Console.logNT("<type_specifier:ts> " + ts + " <declaration_specifiers:ds> " + ds); :}
	| type_specifier:ts {: RESULT = ts; Console.logNT("<type_specifier:ts> " + ts); parser.sAnalyser.setNextVariableType((Type)ts); :}
	| type_qualifier declaration_specifiers
	| type_qualifier
	| function_specifier declaration_specifiers
	| function_specifier
	| alignment_specifier declaration_specifiers
	| alignment_specifier
	;

init_declarator_list
	::= init_declarator:id {: RESULT = id; Console.logNT("<init_declarator:id> " + id); :}
	| init_declarator_list COMMA init_declarator
	;

init_declarator
	::= declarator:d ASSIGNMENT initializer:i {: RESULT = i; Console.logNT("287 <declarator:d> " + d + " = <initializer:i> " + i); parser.sAnalyser.nextVariable = (String)d; :}
	| declarator:d {: RESULT = d; Console.logNT("288 <declarator:d> " + d); parser.sAnalyser.nextVariable = (String)d; :}
	;

storage_class_specifier
	::= TYPEDEF	/* identifiers must be flagged as TYPEDEF_NAME */
	| EXTERN
	| STATIC
	| THREAD_LOCAL
	| AUTO
	| REGISTER
	;

type_specifier
	::= VOID:v 		{: RESULT = new Type("void"); Console.log("301 <VOID:v> " + v); :}
	| CHAR:c 		{: RESULT = new Type("char"); Console.log("302 <CHAR:c> " + c); :}
	| SHORT:s 		{: RESULT = new Type("short"); Console.log("303 <SHORT:s> " + s); :}
	| INT:i 		{: RESULT = new Type("int"); Console.log("304 <INT:i> " + i); :}
	| LONG:l 		{: RESULT = new Type("long"); Console.log("305 <LONG:l> " + l); :}
	| FLOAT:f 		{: RESULT = new Type("float"); Console.log("306 <FLOAT:f> " + f); :}
	| DOUBLE:d 		{: RESULT = new Type("double"); Console.log("307 <DOUBLE:d> " + d); :}
	| SIGNED:s 		{: RESULT = new Type("signed"); Console.log("308 <SIGNED:s> " + s); :}
	| UNSIGNED:u 	{: RESULT = new Type("unsigned"); Console.log("309 <UNSIGNED:u> " + u); :}
	| BOOL:b 		{: RESULT = new Type("bool"); Console.log("310 <BOOL:b> " + b); :}
	| COMPLEX:c 	{: RESULT = new Type("complex"); Console.log("311 <COMPLEX:c> " + c); :}
	| IMAGINARY:i 	{: RESULT = new Type("imaginary"); Console.log("312 <IMAGINARY:i> " + i); :}	  	/* non-mandated extension */
	| atomic_type_specifier
	| struct_or_union_specifier
	| enum_specifier
	| TYPEDEF_NAME		/* after it has been defined as such */
	;

struct_or_union_specifier
	::= struct_or_union LEFT_BRACKET struct_declaration_list RIGHT_BRACKET
	| struct_or_union IDENTIFIER LEFT_BRACKET struct_declaration_list RIGHT_BRACKET
	| struct_or_union IDENTIFIER
	;

struct_or_union
	::= STRUCT
	| UNION
	;

struct_declaration_list
	::= struct_declaration
	| struct_declaration_list struct_declaration
	;

struct_declaration
	::= specifier_qualifier_list SEMICOLON	/* for anonymous struct/union */
	| specifier_qualifier_list struct_declarator_list SEMICOLON
	| static_assert_declaration
	;

specifier_qualifier_list
	::= type_specifier specifier_qualifier_list
	| type_specifier
	| type_qualifier specifier_qualifier_list
	| type_qualifier
	;

struct_declarator_list
	::= struct_declarator
	| struct_declarator_list COMMA struct_declarator
	;

struct_declarator
	::= COLON constant_expression
	| declarator COLON constant_expression
	| declarator
	;

enum_specifier
	::= ENUM LEFT_BRACKET enumerator_list RIGHT_BRACKET
	| ENUM LEFT_BRACKET enumerator_list COMMA RIGHT_BRACKET
	| ENUM IDENTIFIER LEFT_BRACKET enumerator_list RIGHT_BRACKET
	| ENUM IDENTIFIER LEFT_BRACKET enumerator_list COMMA RIGHT_BRACKET
	| ENUM IDENTIFIER
	;

enumerator_list
	::= enumerator
	| enumerator_list COMMA enumerator
	;

enumerator	/* identifiers must be flagged as ENUMERATION_CONSTANT */
	::= enumeration_constant ASSIGNMENT constant_expression
	| enumeration_constant
	;

atomic_type_specifier
	::= ATOMIC LEFT_PARENTESIS type_name RIGHT_PARENTESIS
	;

type_qualifier
	::= CONST
	| RESTRICT
	| VOLATILE
	| ATOMIC
	;

function_specifier
	::= INLINE
	| NORETURN
	;

alignment_specifier
	::= ALIGNAS LEFT_PARENTESIS type_name RIGHT_PARENTESIS
	| ALIGNAS LEFT_PARENTESIS constant_expression RIGHT_PARENTESIS
	;

declarator
	::= pointer direct_declarator 
	| direct_declarator:dd {: RESULT = dd; Console.logNT("400 <direct_declarator:dd> " + dd); :}
	;

direct_declarator
	::= IDENTIFIER:i {: RESULT = i; Console.log("404 <IDENTIFIER:i> " + i); :}
	| LEFT_PARENTESIS declarator RIGHT_PARENTESIS 
	| direct_declarator LEFT_SQ_BRACK RIGHT_SQ_BRACK
	| direct_declarator LEFT_SQ_BRACK TIMES RIGHT_SQ_BRACK
	| direct_declarator LEFT_SQ_BRACK STATIC type_qualifier_list assignment_expression RIGHT_SQ_BRACK
	| direct_declarator LEFT_SQ_BRACK STATIC assignment_expression RIGHT_SQ_BRACK
	| direct_declarator LEFT_SQ_BRACK type_qualifier_list TIMES RIGHT_SQ_BRACK
	| direct_declarator LEFT_SQ_BRACK type_qualifier_list STATIC assignment_expression RIGHT_SQ_BRACK
	| direct_declarator LEFT_SQ_BRACK type_qualifier_list assignment_expression RIGHT_SQ_BRACK
	| direct_declarator LEFT_SQ_BRACK type_qualifier_list RIGHT_SQ_BRACK
	| direct_declarator:dd LEFT_SQ_BRACK assignment_expression:ae RIGHT_SQ_BRACK {: RESULT = dd; parser.sAnalyser.checkTypeOfSizeArray(ae); Console.logNT("414 <LEFT_SQ_BRACK assignment_expression:ae RIGHT_SQ_BRACK> [ " + ae + " ]");:}
	| direct_declarator:dd LEFT_PARENTESIS {: parser.sAnalyser.mudaEscopo(); :} parameter_type_list:ptl RIGHT_PARENTESIS {: System.err.println(parser.sAnalyser.localVariables); Console.logNT("415 <direct_declarator LEFT_PARENTESIS parameter_type_list RIGHT_PARENTESIS> " + dd + " " + ptl); :}
	| direct_declarator:dd LEFT_PARENTESIS {: parser.sAnalyser.mudaEscopo(); :} RIGHT_PARENTESIS {: RESULT = dd; Console.log("416 <direct_declarator:dd> " + dd); :}
	| direct_declarator LEFT_PARENTESIS identifier_list RIGHT_PARENTESIS 
	;

pointer
	::= TIMES type_qualifier_list pointer
	| TIMES type_qualifier_list
	| TIMES pointer
	| TIMES
	;

type_qualifier_list
	::= type_qualifier
	| type_qualifier_list type_qualifier
	;


parameter_type_list
	::= parameter_list COMMA ELLIPSIS
	| parameter_list {: Console.log("435"); :}
	;

parameter_list
	::= parameter_declaration {: Console.log("439"); :}
	| parameter_list COMMA parameter_declaration {: Console.log("440"); :}
	;

parameter_declaration
	::= declaration_specifiers:ds declarator:d {: parser.sAnalyser.addLocalvariable((String)d, (Type)ds); Console.log("444 <declaration_specifiers declarator> " + ds + " " + d); :}
	| declaration_specifiers abstract_declarator 
	| declaration_specifiers 
	;

identifier_list
	::= IDENTIFIER
	| identifier_list COMMA IDENTIFIER
	;

type_name
	::= specifier_qualifier_list abstract_declarator
	| specifier_qualifier_list
	;

abstract_declarator
	::= pointer direct_abstract_declarator
	| pointer
	| direct_abstract_declarator
	;

direct_abstract_declarator
	::= LEFT_PARENTESIS abstract_declarator RIGHT_PARENTESIS
	| LEFT_SQ_BRACK RIGHT_SQ_BRACK
	| LEFT_SQ_BRACK TIMES RIGHT_SQ_BRACK
	| LEFT_SQ_BRACK STATIC type_qualifier_list assignment_expression RIGHT_SQ_BRACK
	| LEFT_SQ_BRACK STATIC assignment_expression RIGHT_SQ_BRACK
	| LEFT_SQ_BRACK type_qualifier_list STATIC assignment_expression RIGHT_SQ_BRACK
	| LEFT_SQ_BRACK type_qualifier_list assignment_expression RIGHT_SQ_BRACK
	| LEFT_SQ_BRACK type_qualifier_list RIGHT_SQ_BRACK
	| LEFT_SQ_BRACK assignment_expression RIGHT_SQ_BRACK
	| direct_abstract_declarator LEFT_SQ_BRACK RIGHT_SQ_BRACK
	| direct_abstract_declarator LEFT_SQ_BRACK TIMES RIGHT_SQ_BRACK
	| direct_abstract_declarator LEFT_SQ_BRACK STATIC type_qualifier_list assignment_expression RIGHT_SQ_BRACK
	| direct_abstract_declarator LEFT_SQ_BRACK STATIC assignment_expression RIGHT_SQ_BRACK
	| direct_abstract_declarator LEFT_SQ_BRACK type_qualifier_list assignment_expression RIGHT_SQ_BRACK
	| direct_abstract_declarator LEFT_SQ_BRACK type_qualifier_list STATIC assignment_expression RIGHT_SQ_BRACK
	| direct_abstract_declarator LEFT_SQ_BRACK type_qualifier_list RIGHT_SQ_BRACK
	| direct_abstract_declarator LEFT_SQ_BRACK assignment_expression RIGHT_SQ_BRACK
	| LEFT_PARENTESIS RIGHT_PARENTESIS
	| LEFT_PARENTESIS parameter_type_list RIGHT_PARENTESIS
	| direct_abstract_declarator LEFT_PARENTESIS RIGHT_PARENTESIS
	| direct_abstract_declarator LEFT_PARENTESIS parameter_type_list RIGHT_PARENTESIS
	;

initializer
	::= LEFT_BRACKET initializer_list:il RIGHT_BRACKET {: RESULT = il; Console.logNT("490 <LEFT_BRACKET initializer_list:il RIGHT_BRACKET> { " + il + " }"); :}
	| LEFT_BRACKET initializer_list COMMA RIGHT_BRACKET 
	| assignment_expression:ae {: RESULT = ae; Console.logNT("492 <assignment_expression:ae> " + ae); :}
	;

initializer_list
	::= designation initializer
	| initializer:i {: RESULT = i; Console.logNT("497 <initializer:i> " + i); :}
	| initializer_list COMMA designation initializer 
	| initializer_list:il COMMA initializer:i {: RESULT = il; parser.sAnalyser.checkConsistencyInsideArray(il, i); Console.logNT("499 <initializer_list:il COMMA initializer:i> [ " + il + " , " + i + " ]" ); :}
	;

designation
	::= designator_list ASSIGNMENT
	;

designator_list
	::= designator
	| designator_list designator
	;

designator
	::= LEFT_SQ_BRACK constant_expression RIGHT_SQ_BRACK
	| DOT IDENTIFIER
	;

static_assert_declaration
	::= STATIC_ASSERT LEFT_PARENTESIS constant_expression COMMA STRING_LITERAL RIGHT_PARENTESIS SEMICOLON
	;

statement
	::= labeled_statement 
	| compound_statement:cs {: RESULT = cs; Console.logNT("522 <compound_statement:cs> " + cs); :}
	| expression_statement 
	| selection_statement:ss {: Console.logNT("524 <selection_statement:ss> " + ss); :}
	| iteration_statement 
	| jump_statement 
	;

labeled_statement
	::= IDENTIFIER COLON statement
	| CASE constant_expression COLON statement
	| DEFAULT COLON statement
	;

compound_statement
	::= LEFT_BRACKET RIGHT_BRACKET {: RESULT = "vazio"; Console.log("536 <LEFT_BRACKET RIGHT_BRACKET>"); :}
	| LEFT_BRACKET  block_item_list:bil RIGHT_BRACKET {: RESULT = bil; Console.log("537 <block_item_list:bil> [ " + bil + " ]"); :}
	;

block_item_list
	::= block_item:bi {: RESULT = bi; Console.logNT("541 <block_item:bi> " + bi); :}
	| block_item_list:bil block_item:bi {: RESULT = bil; Console.logNT("542 <block_item_list:bil block_item:bi> " + bil + " " + bi); :}
	;

block_item
	::= declaration:d {: RESULT = d; Console.logNT("546 <declaration:d> " + d); :}
	| statement:s {: Console.logNT("547 <statement:s> " + s); :}
	;

expression_statement
	::= SEMICOLON
	| expression:e SEMICOLON {: RESULT = e; Console.logNT("<expression:e> " + e); :}
	;

selection_statement
	::= IF LEFT_PARENTESIS expression:e RIGHT_PARENTESIS statement ELSE statement	{: parser.sAnalyser.isSelectionStatementOK((Type) e); :}
	| IF LEFT_PARENTESIS expression:e RIGHT_PARENTESIS statement					{: parser.sAnalyser.isSelectionStatementOK((Type) e); :}
	| SWITCH LEFT_PARENTESIS expression:e RIGHT_PARENTESIS statement
	;

iteration_statement
	::= WHILE LEFT_PARENTESIS expression RIGHT_PARENTESIS statement
	| DO statement WHILE LEFT_PARENTESIS expression RIGHT_PARENTESIS SEMICOLON
	| FOR LEFT_PARENTESIS expression_statement expression_statement RIGHT_PARENTESIS statement
	| FOR LEFT_PARENTESIS expression_statement expression_statement expression RIGHT_PARENTESIS statement
	| FOR LEFT_PARENTESIS declaration expression_statement RIGHT_PARENTESIS statement
	| FOR LEFT_PARENTESIS declaration expression_statement expression RIGHT_PARENTESIS statement
	;

jump_statement
	::= GOTO IDENTIFIER SEMICOLON
	| CONTINUE SEMICOLON
	| BREAK SEMICOLON
	| RETURN SEMICOLON
	| RETURN expression SEMICOLON
	;

translation_unit
	::= includes
	| external_declaration:ed {: RESULT = ed; Console.logNT("<external_declaration:ed> " + ed); :}
	| translation_unit:tu external_declaration:ed {: Console.logNT("<translation_unit:tu external_declaration:ed> " + tu + ed); :}
	;

external_declaration
	::= declaration:d {: RESULT = d; Console.logNT("<declaration:d> " + d); :}
	| function_definition:fd {: RESULT = fd; Console.logNT("<function_definition:fd> " + fd); :}
	;

function_definition
	::= declaration_specifiers:ds declarator:d declaration_list:dl compound_statement:cs
	| declaration_specifiers:ds declarator:d compound_statement:cs {: RESULT = d; Console.log("<declaration_specifiers:ds> " + ds + " <declarator:d> " + d + " <compound_statement:cs> " + cs); :}
	;

declaration_list
	::= declaration
	| declaration_list declaration
	;

